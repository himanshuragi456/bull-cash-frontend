/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace AirdropFactory {
  export type SocialStruct = {
    title: PromiseOrValue<string>;
    logo: PromiseOrValue<string>;
    website: PromiseOrValue<string>;
    facebook: PromiseOrValue<string>;
    twitter: PromiseOrValue<string>;
    github: PromiseOrValue<string>;
    telegram: PromiseOrValue<string>;
    instagram: PromiseOrValue<string>;
    discord: PromiseOrValue<string>;
    reddit: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type SocialStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    title: string;
    logo: string;
    website: string;
    facebook: string;
    twitter: string;
    github: string;
    telegram: string;
    instagram: string;
    discord: string;
    reddit: string;
    description: string;
  };

  export type VestingStruct = {
    first_release: PromiseOrValue<BigNumberish>;
    cycle_release: PromiseOrValue<BigNumberish>;
    cycle_period: PromiseOrValue<BigNumberish>;
  };

  export type VestingStructOutput = [BigNumber, BigNumber, BigNumber] & {
    first_release: BigNumber;
    cycle_release: BigNumber;
    cycle_period: BigNumber;
  };
}

export interface AirdropFactoryInterface extends utils.Interface {
  functions: {
    "FEE()": FunctionFragment;
    "MAX_ALLOCATIONS()": FunctionFragment;
    "claimTokens(address)": FunctionFragment;
    "createAirdrop((string,string,string,string,string,string,string,string,string,string,string),(uint256,uint256,uint256),uint256,address[],uint256[],address)": FunctionFragment;
    "removeAllAllocations(address)": FunctionFragment;
    "setAllocations(address[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE"
      | "MAX_ALLOCATIONS"
      | "claimTokens"
      | "createAirdrop"
      | "removeAllAllocations"
      | "setAllocations"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ALLOCATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdrop",
    values: [
      AirdropFactory.SocialStruct,
      AirdropFactory.VestingStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllAllocations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocations",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ALLOCATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocations",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AirdropFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAirdrop(
      _social: AirdropFactory.SocialStruct,
      vesting: AirdropFactory.VestingStruct,
      starts_at: PromiseOrValue<BigNumberish>,
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAllAllocations(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllocations(
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

  claimTokens(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAirdrop(
    _social: AirdropFactory.SocialStruct,
    vesting: AirdropFactory.VestingStruct,
    starts_at: PromiseOrValue<BigNumberish>,
    _allocations: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAllAllocations(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllocations(
    _allocations: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAirdrop(
      _social: AirdropFactory.SocialStruct,
      vesting: AirdropFactory.VestingStruct,
      starts_at: PromiseOrValue<BigNumberish>,
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAllAllocations(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAllocations(
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAirdrop(
      _social: AirdropFactory.SocialStruct,
      vesting: AirdropFactory.VestingStruct,
      starts_at: PromiseOrValue<BigNumberish>,
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAllAllocations(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllocations(
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAirdrop(
      _social: AirdropFactory.SocialStruct,
      vesting: AirdropFactory.VestingStruct,
      starts_at: PromiseOrValue<BigNumberish>,
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAllAllocations(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllocations(
      _allocations: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
