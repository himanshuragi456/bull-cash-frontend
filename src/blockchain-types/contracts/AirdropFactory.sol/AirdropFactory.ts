/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AirdropFactoryInterface extends utils.Interface {
  functions: {
    "IsEnabled()": FunctionFragment;
    "adminWallet()": FunctionFragment;
    "bnbLiquidity(address,uint256)": FunctionFragment;
    "createSale(address[3],uint256[1],string,uint256[3])": FunctionFragment;
    "initialize(address,address,uint8,uint256,bool)": FunctionFragment;
    "master()": FunctionFragment;
    "masterPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "partnerFee()": FunctionFragment;
    "poolEmergencyWithdraw(address,address,uint256)": FunctionFragment;
    "poolEmergencyWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "poolManager()": FunctionFragment;
    "poolOwner()": FunctionFragment;
    "poolSetGovernance(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminWallet(address)": FunctionFragment;
    "setMasterAddress(address)": FunctionFragment;
    "setPartnerFee(uint256)": FunctionFragment;
    "setPoolManager(address)": FunctionFragment;
    "setPoolOwner(address)": FunctionFragment;
    "setPresalePoolPrice(uint256)": FunctionFragment;
    "setVersion(uint8)": FunctionFragment;
    "transferAnyERC20Token(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IsEnabled"
      | "adminWallet"
      | "bnbLiquidity"
      | "createSale"
      | "initialize"
      | "master"
      | "masterPrice"
      | "owner"
      | "partnerFee"
      | "poolEmergencyWithdraw"
      | "poolEmergencyWithdrawToken"
      | "poolManager"
      | "poolOwner"
      | "poolSetGovernance"
      | "renounceOwnership"
      | "setAdminWallet"
      | "setMasterAddress"
      | "setPartnerFee"
      | "setPoolManager"
      | "setPoolOwner"
      | "setPresalePoolPrice"
      | "setVersion"
      | "transferAnyERC20Token"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IsEnabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      [PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partnerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolSetGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresalePoolPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IsEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bnbLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partnerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolSetGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresalePoolPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AirdropCreated(address,address[3],uint256[1],string,uint256[3])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AirdropCreatedEventObject {
  pool_address: string;
  _addrs: [string, string, string];
  _saleInfo: [BigNumber];
  _poolDetails: string;
  _vestingInit: [BigNumber, BigNumber, BigNumber];
}
export type AirdropCreatedEvent = TypedEvent<
  [
    string,
    [string, string, string],
    [BigNumber],
    string,
    [BigNumber, BigNumber, BigNumber]
  ],
  AirdropCreatedEventObject
>;

export type AirdropCreatedEventFilter = TypedEventFilter<AirdropCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AirdropFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    adminWallet(overrides?: CallOverrides): Promise<[string]>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSale(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _master: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    master(overrides?: CallOverrides): Promise<[string]>;

    masterPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partnerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    poolOwner(overrides?: CallOverrides): Promise<[string]>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  IsEnabled(overrides?: CallOverrides): Promise<boolean>;

  adminWallet(overrides?: CallOverrides): Promise<string>;

  bnbLiquidity(
    _reciever: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSale(
    _addrs: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _saleInfo: [PromiseOrValue<BigNumberish>],
    _poolDetails: PromiseOrValue<string>,
    _vestingInit: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _master: PromiseOrValue<string>,
    _poolmanager: PromiseOrValue<string>,
    _version: PromiseOrValue<BigNumberish>,
    _masterPrice: PromiseOrValue<BigNumberish>,
    _IsEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  master(overrides?: CallOverrides): Promise<string>;

  masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

  poolEmergencyWithdraw(
    poolAddress: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolEmergencyWithdrawToken(
    poolAddress: PromiseOrValue<string>,
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  poolOwner(overrides?: CallOverrides): Promise<string>;

  poolSetGovernance(
    poolAddress: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminWallet(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMasterAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartnerFee(
    _partnerFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolManager(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolOwner(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPresalePoolPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAnyERC20Token(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    IsEnabled(overrides?: CallOverrides): Promise<boolean>;

    adminWallet(overrides?: CallOverrides): Promise<string>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSale(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _master: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    master(overrides?: CallOverrides): Promise<string>;

    masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    poolOwner(overrides?: CallOverrides): Promise<string>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AirdropCreated(address,address[3],uint256[1],string,uint256[3])"(
      pool_address?: PromiseOrValue<string> | null,
      _addrs?: null,
      _saleInfo?: null,
      _poolDetails?: null,
      _vestingInit?: null
    ): AirdropCreatedEventFilter;
    AirdropCreated(
      pool_address?: PromiseOrValue<string> | null,
      _addrs?: null,
      _saleInfo?: null,
      _poolDetails?: null,
      _vestingInit?: null
    ): AirdropCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    IsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    adminWallet(overrides?: CallOverrides): Promise<BigNumber>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSale(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _master: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    poolOwner(overrides?: CallOverrides): Promise<BigNumber>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _master: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partnerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
