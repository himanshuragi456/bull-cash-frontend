/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibPresale {
  export type FairLaunchStruct = {
    router: PromiseOrValue<string>;
    governance: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    softCap: PromiseOrValue<BigNumberish>;
    totalToken: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    feeIndex: PromiseOrValue<BigNumberish>;
    liquidityLockDays: PromiseOrValue<BigNumberish>;
    liquidityPercent: PromiseOrValue<BigNumberish>;
    refundType: PromiseOrValue<BigNumberish>;
    poolDetails: PromiseOrValue<string>;
  };

  export type FairLaunchStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    router: string;
    governance: string;
    token: string;
    paymentToken: string;
    softCap: BigNumber;
    totalToken: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    feeIndex: BigNumber;
    liquidityLockDays: BigNumber;
    liquidityPercent: BigNumber;
    refundType: BigNumber;
    poolDetails: string;
  };

  export type PresaleStruct = {
    router: PromiseOrValue<string>;
    governance: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    rate: PromiseOrValue<BigNumberish>;
    minContribution: PromiseOrValue<BigNumberish>;
    maxContribution: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    feeIndex: PromiseOrValue<BigNumberish>;
    liquidityListingRate: PromiseOrValue<BigNumberish>;
    liquidityUnlockTime: PromiseOrValue<BigNumberish>;
    liquidityLockDays: PromiseOrValue<BigNumberish>;
    liquidityPercent: PromiseOrValue<BigNumberish>;
    refundType: PromiseOrValue<BigNumberish>;
    poolDetails: PromiseOrValue<string>;
    tgeBps: PromiseOrValue<BigNumberish>;
    cycle: PromiseOrValue<BigNumberish>;
    cycleBps: PromiseOrValue<BigNumberish>;
    listingType: PromiseOrValue<BigNumberish>;
    useWhitelist: PromiseOrValue<boolean>;
    publicStartTime: PromiseOrValue<BigNumberish>;
    tier1: LibTier.TierStruct;
    tier2: LibTier.TierStruct;
  };

  export type PresaleStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    LibTier.TierStructOutput,
    LibTier.TierStructOutput
  ] & {
    router: string;
    governance: string;
    token: string;
    paymentToken: string;
    rate: BigNumber;
    minContribution: BigNumber;
    maxContribution: BigNumber;
    softCap: BigNumber;
    hardCap: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    feeIndex: BigNumber;
    liquidityListingRate: BigNumber;
    liquidityUnlockTime: BigNumber;
    liquidityLockDays: BigNumber;
    liquidityPercent: BigNumber;
    refundType: BigNumber;
    poolDetails: string;
    tgeBps: BigNumber;
    cycle: BigNumber;
    cycleBps: BigNumber;
    listingType: BigNumber;
    useWhitelist: boolean;
    publicStartTime: BigNumber;
    tier1: LibTier.TierStructOutput;
    tier2: LibTier.TierStructOutput;
  };

  export type PrivateSaleStruct = {
    governance: PromiseOrValue<string>;
    tokenName: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    minContribution: PromiseOrValue<BigNumberish>;
    maxContribution: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    feeIndex: PromiseOrValue<BigNumberish>;
    poolDetails: PromiseOrValue<string>;
    tgeBps: PromiseOrValue<BigNumberish>;
    cycle: PromiseOrValue<BigNumberish>;
    cycleBps: PromiseOrValue<BigNumberish>;
    useWhitelist: PromiseOrValue<boolean>;
    publicStartTime: PromiseOrValue<BigNumberish>;
    tier1: LibTier.TierStruct;
    tier2: LibTier.TierStruct;
  };

  export type PrivateSaleStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    LibTier.TierStructOutput,
    LibTier.TierStructOutput
  ] & {
    governance: string;
    tokenName: string;
    paymentToken: string;
    minContribution: BigNumber;
    maxContribution: BigNumber;
    softCap: BigNumber;
    hardCap: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    feeIndex: BigNumber;
    poolDetails: string;
    tgeBps: BigNumber;
    cycle: BigNumber;
    cycleBps: BigNumber;
    useWhitelist: boolean;
    publicStartTime: BigNumber;
    tier1: LibTier.TierStructOutput;
    tier2: LibTier.TierStructOutput;
  };
}

export declare namespace LibTier {
  export type TierStruct = { endTime: PromiseOrValue<BigNumberish> };

  export type TierStructOutput = [BigNumber] & { endTime: BigNumber };
}

export declare namespace CirclePoolFactory {
  export type FeeStruct = {
    tokenFee: PromiseOrValue<BigNumberish>;
    nativeFee: PromiseOrValue<BigNumberish>;
  };

  export type FeeStructOutput = [BigNumber, BigNumber] & {
    tokenFee: BigNumber;
    nativeFee: BigNumber;
  };
}

export interface CirclePoolFactoryInterface extends utils.Interface {
  functions: {
    "IsEnabled()": FunctionFragment;
    "adminWallet()": FunctionFragment;
    "auditPrice()": FunctionFragment;
    "bnbLiquidity(address,uint256)": FunctionFragment;
    "createFairSale((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string))": FunctionFragment;
    "createPrivateSale((address,string,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256,uint256,uint256,bool,uint256,(uint256),(uint256)))": FunctionFragment;
    "createSale((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256,uint256,uint256,uint256,bool,uint256,(uint256),(uint256)))": FunctionFragment;
    "fairmaster()": FunctionFragment;
    "fairmasterPrice()": FunctionFragment;
    "fees(uint256)": FunctionFragment;
    "getFee(uint256)": FunctionFragment;
    "getPaymentCurrency(address)": FunctionFragment;
    "initialize(address,address,address,address,uint8,uint256,uint256,uint256,bool)": FunctionFragment;
    "kycPrice()": FunctionFragment;
    "master()": FunctionFragment;
    "masterPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "partnerFee()": FunctionFragment;
    "paymentCurrencies(address)": FunctionFragment;
    "poolEmergencyWithdraw(address,address,uint256)": FunctionFragment;
    "poolEmergencyWithdrawLiquidity(address,address,address,uint256)": FunctionFragment;
    "poolEmergencyWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "poolManager()": FunctionFragment;
    "poolOwner()": FunctionFragment;
    "poolSetGovernance(address,address)": FunctionFragment;
    "privatemaster()": FunctionFragment;
    "privatemasterPrice()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminWallet(address)": FunctionFragment;
    "setAuditPrice(uint256)": FunctionFragment;
    "setFairAddress(address)": FunctionFragment;
    "setFairPoolPrice(uint256)": FunctionFragment;
    "setFees((uint256,uint256),uint256)": FunctionFragment;
    "setMasterAddress(address)": FunctionFragment;
    "setPartnerFee(uint256)": FunctionFragment;
    "setPaymentCurrency(address,bool)": FunctionFragment;
    "setPoolManager(address)": FunctionFragment;
    "setPoolOwner(address)": FunctionFragment;
    "setPresalePoolPrice(uint256)": FunctionFragment;
    "setPrivateAddress(address)": FunctionFragment;
    "setPrivatePoolPrice(uint256)": FunctionFragment;
    "setVersion(uint8)": FunctionFragment;
    "setkycPrice(uint256)": FunctionFragment;
    "transferAnyERC20Token(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IsEnabled"
      | "adminWallet"
      | "auditPrice"
      | "bnbLiquidity"
      | "createFairSale"
      | "createPrivateSale"
      | "createSale"
      | "fairmaster"
      | "fairmasterPrice"
      | "fees"
      | "getFee"
      | "getPaymentCurrency"
      | "initialize"
      | "kycPrice"
      | "master"
      | "masterPrice"
      | "owner"
      | "partnerFee"
      | "paymentCurrencies"
      | "poolEmergencyWithdraw"
      | "poolEmergencyWithdrawLiquidity"
      | "poolEmergencyWithdrawToken"
      | "poolManager"
      | "poolOwner"
      | "poolSetGovernance"
      | "privatemaster"
      | "privatemasterPrice"
      | "renounceOwnership"
      | "setAdminWallet"
      | "setAuditPrice"
      | "setFairAddress"
      | "setFairPoolPrice"
      | "setFees"
      | "setMasterAddress"
      | "setPartnerFee"
      | "setPaymentCurrency"
      | "setPoolManager"
      | "setPoolOwner"
      | "setPresalePoolPrice"
      | "setPrivateAddress"
      | "setPrivatePoolPrice"
      | "setVersion"
      | "setkycPrice"
      | "transferAnyERC20Token"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IsEnabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFairSale",
    values: [LibPresale.FairLaunchStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrivateSale",
    values: [LibPresale.PrivateSaleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [LibPresale.PresaleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fairmaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fairmasterPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "kycPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partnerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdrawLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEmergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolSetGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "privatemaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privatemasterPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuditPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFairAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFairPoolPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [CirclePoolFactory.FeeStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentCurrency",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresalePoolPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivateAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivatePoolPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setkycPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IsEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auditPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFairSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrivateSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fairmaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fairmasterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kycPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partnerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolEmergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolSetGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privatemaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privatemasterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuditPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFairPoolPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMasterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresalePoolPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrivatePoolPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setkycPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AuditUpdated(address,bool,string)": EventFragment;
    "Cancelled(address)": EventFragment;
    "ContributionWithdrawn(address)": EventFragment;
    "EmergencyLiquidityWithdrawn(address)": EventFragment;
    "EmergencyWithdrawn(address)": EventFragment;
    "FairPoolCreated(address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KYCUpdated(address,bool,string)": EventFragment;
    "LiquidityWithdrawn(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolFinalised(address)": EventFragment;
    "PoolUpdated(address)": EventFragment;
    "PresalePoolCreated(address,tuple)": EventFragment;
    "PrivatePoolCreated(address,tuple)": EventFragment;
    "UserDelisted(address)": EventFragment;
    "UserWhitelisted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuditUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyLiquidityWithdrawn"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FairPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KYCUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFinalised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresalePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivatePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWhitelisted"): EventFragment;
}

export interface AuditUpdatedEventObject {
  pool_address: string;
  status: boolean;
  link: string;
}
export type AuditUpdatedEvent = TypedEvent<
  [string, boolean, string],
  AuditUpdatedEventObject
>;

export type AuditUpdatedEventFilter = TypedEventFilter<AuditUpdatedEvent>;

export interface CancelledEventObject {
  pool_address: string;
}
export type CancelledEvent = TypedEvent<[string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ContributionWithdrawnEventObject {
  pool_address: string;
}
export type ContributionWithdrawnEvent = TypedEvent<
  [string],
  ContributionWithdrawnEventObject
>;

export type ContributionWithdrawnEventFilter =
  TypedEventFilter<ContributionWithdrawnEvent>;

export interface EmergencyLiquidityWithdrawnEventObject {
  pool_address: string;
}
export type EmergencyLiquidityWithdrawnEvent = TypedEvent<
  [string],
  EmergencyLiquidityWithdrawnEventObject
>;

export type EmergencyLiquidityWithdrawnEventFilter =
  TypedEventFilter<EmergencyLiquidityWithdrawnEvent>;

export interface EmergencyWithdrawnEventObject {
  pool_address: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface FairPoolCreatedEventObject {
  pool_address: string;
  presale: LibPresale.FairLaunchStructOutput;
}
export type FairPoolCreatedEvent = TypedEvent<
  [string, LibPresale.FairLaunchStructOutput],
  FairPoolCreatedEventObject
>;

export type FairPoolCreatedEventFilter = TypedEventFilter<FairPoolCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KYCUpdatedEventObject {
  pool_address: string;
  status: boolean;
  link: string;
}
export type KYCUpdatedEvent = TypedEvent<
  [string, boolean, string],
  KYCUpdatedEventObject
>;

export type KYCUpdatedEventFilter = TypedEventFilter<KYCUpdatedEvent>;

export interface LiquidityWithdrawnEventObject {
  pool_address: string;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [string],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolFinalisedEventObject {
  pool_address: string;
}
export type PoolFinalisedEvent = TypedEvent<[string], PoolFinalisedEventObject>;

export type PoolFinalisedEventFilter = TypedEventFilter<PoolFinalisedEvent>;

export interface PoolUpdatedEventObject {
  pool_address: string;
}
export type PoolUpdatedEvent = TypedEvent<[string], PoolUpdatedEventObject>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface PresalePoolCreatedEventObject {
  pool_address: string;
  presale: LibPresale.PresaleStructOutput;
}
export type PresalePoolCreatedEvent = TypedEvent<
  [string, LibPresale.PresaleStructOutput],
  PresalePoolCreatedEventObject
>;

export type PresalePoolCreatedEventFilter =
  TypedEventFilter<PresalePoolCreatedEvent>;

export interface PrivatePoolCreatedEventObject {
  pool_address: string;
  presale: LibPresale.PrivateSaleStructOutput;
}
export type PrivatePoolCreatedEvent = TypedEvent<
  [string, LibPresale.PrivateSaleStructOutput],
  PrivatePoolCreatedEventObject
>;

export type PrivatePoolCreatedEventFilter =
  TypedEventFilter<PrivatePoolCreatedEvent>;

export interface UserDelistedEventObject {
  pool_address: string;
}
export type UserDelistedEvent = TypedEvent<[string], UserDelistedEventObject>;

export type UserDelistedEventFilter = TypedEventFilter<UserDelistedEvent>;

export interface UserWhitelistedEventObject {
  pool_address: string;
}
export type UserWhitelistedEvent = TypedEvent<
  [string],
  UserWhitelistedEventObject
>;

export type UserWhitelistedEventFilter = TypedEventFilter<UserWhitelistedEvent>;

export interface CirclePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CirclePoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    adminWallet(overrides?: CallOverrides): Promise<[string]>;

    auditPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFairSale(
      presale: LibPresale.FairLaunchStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPrivateSale(
      presale: LibPresale.PrivateSaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fairmaster(overrides?: CallOverrides): Promise<[string]>;

    fairmasterPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenFee: BigNumber; nativeFee: BigNumber }
    >;

    getFee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CirclePoolFactory.FeeStructOutput]>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _master: PromiseOrValue<string>,
      _privatemaster: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _fairmaster: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _privatemasterPrice: PromiseOrValue<BigNumberish>,
      _fairmasterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kycPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    master(overrides?: CallOverrides): Promise<[string]>;

    masterPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partnerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolEmergencyWithdrawLiquidity(
      poolAddress: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    poolOwner(overrides?: CallOverrides): Promise<[string]>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    privatemaster(overrides?: CallOverrides): Promise<[string]>;

    privatemasterPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuditPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFairAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFairPoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _fee: CirclePoolFactory.FeeStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrivateAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrivatePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setkycPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  IsEnabled(overrides?: CallOverrides): Promise<boolean>;

  adminWallet(overrides?: CallOverrides): Promise<string>;

  auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

  bnbLiquidity(
    _reciever: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFairSale(
    presale: LibPresale.FairLaunchStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPrivateSale(
    presale: LibPresale.PrivateSaleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSale(
    presale: LibPresale.PresaleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fairmaster(overrides?: CallOverrides): Promise<string>;

  fairmasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

  fees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenFee: BigNumber; nativeFee: BigNumber }
  >;

  getFee(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CirclePoolFactory.FeeStructOutput>;

  getPaymentCurrency(
    index: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _master: PromiseOrValue<string>,
    _privatemaster: PromiseOrValue<string>,
    _poolmanager: PromiseOrValue<string>,
    _fairmaster: PromiseOrValue<string>,
    _version: PromiseOrValue<BigNumberish>,
    _masterPrice: PromiseOrValue<BigNumberish>,
    _privatemasterPrice: PromiseOrValue<BigNumberish>,
    _fairmasterPrice: PromiseOrValue<BigNumberish>,
    _IsEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kycPrice(overrides?: CallOverrides): Promise<BigNumber>;

  master(overrides?: CallOverrides): Promise<string>;

  masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

  paymentCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolEmergencyWithdraw(
    poolAddress: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolEmergencyWithdrawLiquidity(
    poolAddress: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolEmergencyWithdrawToken(
    poolAddress: PromiseOrValue<string>,
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  poolOwner(overrides?: CallOverrides): Promise<string>;

  poolSetGovernance(
    poolAddress: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  privatemaster(overrides?: CallOverrides): Promise<string>;

  privatemasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminWallet(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuditPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFairAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFairPoolPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _fee: CirclePoolFactory.FeeStruct,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMasterAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartnerFee(
    _partnerFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentCurrency(
    index: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolManager(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolOwner(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPresalePoolPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrivateAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrivatePoolPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setkycPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAnyERC20Token(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    IsEnabled(overrides?: CallOverrides): Promise<boolean>;

    adminWallet(overrides?: CallOverrides): Promise<string>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFairSale(
      presale: LibPresale.FairLaunchStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createPrivateSale(
      presale: LibPresale.PrivateSaleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fairmaster(overrides?: CallOverrides): Promise<string>;

    fairmasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenFee: BigNumber; nativeFee: BigNumber }
    >;

    getFee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CirclePoolFactory.FeeStructOutput>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _master: PromiseOrValue<string>,
      _privatemaster: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _fairmaster: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _privatemasterPrice: PromiseOrValue<BigNumberish>,
      _fairmasterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    kycPrice(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<string>;

    masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolEmergencyWithdrawLiquidity(
      poolAddress: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    poolOwner(overrides?: CallOverrides): Promise<string>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    privatemaster(overrides?: CallOverrides): Promise<string>;

    privatemasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuditPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFairAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFairPoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _fee: CirclePoolFactory.FeeStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrivateAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrivatePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setkycPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AuditUpdated(address,bool,string)"(
      pool_address?: PromiseOrValue<string> | null,
      status?: null,
      link?: null
    ): AuditUpdatedEventFilter;
    AuditUpdated(
      pool_address?: PromiseOrValue<string> | null,
      status?: null,
      link?: null
    ): AuditUpdatedEventFilter;

    "Cancelled(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(
      pool_address?: PromiseOrValue<string> | null
    ): CancelledEventFilter;

    "ContributionWithdrawn(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): ContributionWithdrawnEventFilter;
    ContributionWithdrawn(
      pool_address?: PromiseOrValue<string> | null
    ): ContributionWithdrawnEventFilter;

    "EmergencyLiquidityWithdrawn(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): EmergencyLiquidityWithdrawnEventFilter;
    EmergencyLiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null
    ): EmergencyLiquidityWithdrawnEventFilter;

    "EmergencyWithdrawn(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(
      pool_address?: PromiseOrValue<string> | null
    ): EmergencyWithdrawnEventFilter;

    "FairPoolCreated(address,tuple)"(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): FairPoolCreatedEventFilter;
    FairPoolCreated(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): FairPoolCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KYCUpdated(address,bool,string)"(
      pool_address?: PromiseOrValue<string> | null,
      status?: null,
      link?: null
    ): KYCUpdatedEventFilter;
    KYCUpdated(
      pool_address?: PromiseOrValue<string> | null,
      status?: null,
      link?: null
    ): KYCUpdatedEventFilter;

    "LiquidityWithdrawn(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      pool_address?: PromiseOrValue<string> | null
    ): LiquidityWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolFinalised(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): PoolFinalisedEventFilter;
    PoolFinalised(
      pool_address?: PromiseOrValue<string> | null
    ): PoolFinalisedEventFilter;

    "PoolUpdated(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      pool_address?: PromiseOrValue<string> | null
    ): PoolUpdatedEventFilter;

    "PresalePoolCreated(address,tuple)"(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PresalePoolCreatedEventFilter;
    PresalePoolCreated(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PresalePoolCreatedEventFilter;

    "PrivatePoolCreated(address,tuple)"(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PrivatePoolCreatedEventFilter;
    PrivatePoolCreated(
      pool_address?: PromiseOrValue<string> | null,
      presale?: null
    ): PrivatePoolCreatedEventFilter;

    "UserDelisted(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): UserDelistedEventFilter;
    UserDelisted(
      pool_address?: PromiseOrValue<string> | null
    ): UserDelistedEventFilter;

    "UserWhitelisted(address)"(
      pool_address?: PromiseOrValue<string> | null
    ): UserWhitelistedEventFilter;
    UserWhitelisted(
      pool_address?: PromiseOrValue<string> | null
    ): UserWhitelistedEventFilter;
  };

  estimateGas: {
    IsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    adminWallet(overrides?: CallOverrides): Promise<BigNumber>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFairSale(
      presale: LibPresale.FairLaunchStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPrivateSale(
      presale: LibPresale.PrivateSaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fairmaster(overrides?: CallOverrides): Promise<BigNumber>;

    fairmasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _master: PromiseOrValue<string>,
      _privatemaster: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _fairmaster: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _privatemasterPrice: PromiseOrValue<BigNumberish>,
      _fairmasterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kycPrice(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    masterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partnerFee(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolEmergencyWithdrawLiquidity(
      poolAddress: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    poolOwner(overrides?: CallOverrides): Promise<BigNumber>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    privatemaster(overrides?: CallOverrides): Promise<BigNumber>;

    privatemasterPrice(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuditPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFairAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFairPoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _fee: CirclePoolFactory.FeeStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrivateAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrivatePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setkycPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFairSale(
      presale: LibPresale.FairLaunchStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPrivateSale(
      presale: LibPresale.PrivateSaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      presale: LibPresale.PresaleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fairmaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fairmasterPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentCurrency(
      index: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _master: PromiseOrValue<string>,
      _privatemaster: PromiseOrValue<string>,
      _poolmanager: PromiseOrValue<string>,
      _fairmaster: PromiseOrValue<string>,
      _version: PromiseOrValue<BigNumberish>,
      _masterPrice: PromiseOrValue<BigNumberish>,
      _privatemasterPrice: PromiseOrValue<BigNumberish>,
      _fairmasterPrice: PromiseOrValue<BigNumberish>,
      _IsEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kycPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partnerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolEmergencyWithdraw(
      poolAddress: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolEmergencyWithdrawLiquidity(
      poolAddress: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolEmergencyWithdrawToken(
      poolAddress: PromiseOrValue<string>,
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSetGovernance(
      poolAddress: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    privatemaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privatemasterPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminWallet(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuditPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFairAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFairPoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _fee: CirclePoolFactory.FeeStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMasterAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerFee(
      _partnerFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentCurrency(
      index: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolManager(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolOwner(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPresalePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrivateAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrivatePoolPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setkycPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
