/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace CirclePoolManager {
  export type CumulativeLockInfoStruct = {
    poolAddress: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    poolState: PromiseOrValue<BigNumberish>;
    poolType: PromiseOrValue<BigNumberish>;
    decimals: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    totalRaised: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    minContribution: PromiseOrValue<BigNumberish>;
    maxContribution: PromiseOrValue<BigNumberish>;
    rate: PromiseOrValue<BigNumberish>;
    liquidityListingRate: PromiseOrValue<BigNumberish>;
    liquidityPercent: PromiseOrValue<BigNumberish>;
    liquidityUnlockTime: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    poolDetails: PromiseOrValue<string>;
  };

  export type CumulativeLockInfoStructOutput = [
    string,
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    poolAddress: string;
    token: string;
    poolState: number;
    poolType: number;
    decimals: number;
    startTime: BigNumber;
    endTime: BigNumber;
    totalRaised: BigNumber;
    hardCap: BigNumber;
    softCap: BigNumber;
    minContribution: BigNumber;
    maxContribution: BigNumber;
    rate: BigNumber;
    liquidityListingRate: BigNumber;
    liquidityPercent: BigNumber;
    liquidityUnlockTime: BigNumber;
    name: string;
    symbol: string;
    poolDetails: string;
  };

  export type TopPoolInfoStruct = {
    totalRaised: PromiseOrValue<BigNumberish>;
    poolAddress: PromiseOrValue<string>;
  };

  export type TopPoolInfoStructOutput = [BigNumber, string] & {
    totalRaised: BigNumber;
    poolAddress: string;
  };
}

export interface CirclePoolManagerInterface extends utils.Interface {
  functions: {
    "addAdminPoolFactory(address)": FunctionFragment;
    "addPoolFactories(address[])": FunctionFragment;
    "addPoolFactory(address)": FunctionFragment;
    "addTopPool(address,uint256)": FunctionFragment;
    "bnbLiquidity(address,uint256)": FunctionFragment;
    "decreaseTotalValueLocked(uint256)": FunctionFragment;
    "getAllContributedPools(address)": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getContributedPoolAtIndex(address,uint256)": FunctionFragment;
    "getCumulativePoolInfo(uint256,uint256)": FunctionFragment;
    "getPoolAt(uint256)": FunctionFragment;
    "getPoolAt(uint8,uint256)": FunctionFragment;
    "getPoolsOf(address)": FunctionFragment;
    "getTopPool()": FunctionFragment;
    "getTotalNumberOfContributedPools(address)": FunctionFragment;
    "getTotalNumberOfPools()": FunctionFragment;
    "getTotalNumberOfPools(uint8)": FunctionFragment;
    "getUserContributedPoolInfo(address,uint256,uint256)": FunctionFragment;
    "increaseTotalValueLocked(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeTopPools()": FunctionFragment;
    "isPoolGenerated(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolForToken(address)": FunctionFragment;
    "privatePoolForToken(string)": FunctionFragment;
    "recordContribution(address,address)": FunctionFragment;
    "registerPool(address,address,address,uint8)": FunctionFragment;
    "registerPrivatePool(address,string,address,uint8)": FunctionFragment;
    "removePoolFactory(address)": FunctionFragment;
    "removePoolForToken(address,address)": FunctionFragment;
    "removePrivatePoolForToken(string,address)": FunctionFragment;
    "removeTopPool(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalLiquidityRaisedInBnb()": FunctionFragment;
    "totalParticipants()": FunctionFragment;
    "totalValueLockedInBnb()": FunctionFragment;
    "transferAnyERC20Token(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdminPoolFactory"
      | "addPoolFactories"
      | "addPoolFactory"
      | "addTopPool"
      | "bnbLiquidity"
      | "decreaseTotalValueLocked"
      | "getAllContributedPools"
      | "getAllPools"
      | "getContributedPoolAtIndex"
      | "getCumulativePoolInfo"
      | "getPoolAt(uint256)"
      | "getPoolAt(uint8,uint256)"
      | "getPoolsOf"
      | "getTopPool"
      | "getTotalNumberOfContributedPools"
      | "getTotalNumberOfPools()"
      | "getTotalNumberOfPools(uint8)"
      | "getUserContributedPoolInfo"
      | "increaseTotalValueLocked"
      | "initialize"
      | "initializeTopPools"
      | "isPoolGenerated"
      | "owner"
      | "poolForToken"
      | "privatePoolForToken"
      | "recordContribution"
      | "registerPool"
      | "registerPrivatePool"
      | "removePoolFactory"
      | "removePoolForToken"
      | "removePrivatePoolForToken"
      | "removeTopPool"
      | "renounceOwnership"
      | "totalLiquidityRaisedInBnb"
      | "totalParticipants"
      | "totalValueLockedInBnb"
      | "transferAnyERC20Token"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAdminPoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolFactories",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTopPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bnbLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTotalValueLocked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContributedPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributedPoolAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativePoolInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAt(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAt(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNumberOfContributedPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNumberOfPools()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNumberOfPools(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserContributedPoolInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalValueLocked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTopPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolGenerated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolForToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "privatePoolForToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordContribution",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPrivatePool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolForToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrivatePoolForToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTopPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityRaisedInBnb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLockedInBnb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAdminPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTopPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContributedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributedPoolAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativePoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAt(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAt(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTopPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNumberOfContributedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNumberOfPools()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNumberOfPools(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserContributedPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeTopPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privatePoolForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPrivatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrivatePoolForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTopPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityRaisedInBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLockedInBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ContributionUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolForTokenRemoved(address,address)": EventFragment;
    "PrivatePoolForTokenRemoved(string,address)": EventFragment;
    "TvlChanged(uint256,uint256)": EventFragment;
    "sender(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolForTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivatePoolForTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TvlChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sender"): EventFragment;
}

export interface ContributionUpdatedEventObject {
  totalParticipations: BigNumber;
}
export type ContributionUpdatedEvent = TypedEvent<
  [BigNumber],
  ContributionUpdatedEventObject
>;

export type ContributionUpdatedEventFilter =
  TypedEventFilter<ContributionUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolForTokenRemovedEventObject {
  token: string;
  pool: string;
}
export type PoolForTokenRemovedEvent = TypedEvent<
  [string, string],
  PoolForTokenRemovedEventObject
>;

export type PoolForTokenRemovedEventFilter =
  TypedEventFilter<PoolForTokenRemovedEvent>;

export interface PrivatePoolForTokenRemovedEventObject {
  tokenName: string;
  pool: string;
}
export type PrivatePoolForTokenRemovedEvent = TypedEvent<
  [string, string],
  PrivatePoolForTokenRemovedEventObject
>;

export type PrivatePoolForTokenRemovedEventFilter =
  TypedEventFilter<PrivatePoolForTokenRemovedEvent>;

export interface TvlChangedEventObject {
  totalLocked: BigNumber;
  totalRaised: BigNumber;
}
export type TvlChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TvlChangedEventObject
>;

export type TvlChangedEventFilter = TypedEventFilter<TvlChangedEvent>;

export interface senderEventObject {
  sender: string;
}
export type senderEvent = TypedEvent<[string], senderEventObject>;

export type senderEventFilter = TypedEventFilter<senderEvent>;

export interface CirclePoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CirclePoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdminPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPoolFactories(
      factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTopPool(
      poolAddress: PromiseOrValue<string>,
      raisedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAllPools(overrides?: CallOverrides): Promise<[string[]]>;

    getContributedPoolAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCumulativePoolInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CirclePoolManager.CumulativeLockInfoStructOutput[]]>;

    "getPoolAt(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPoolAt(uint8,uint256)"(
      version: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTopPool(
      overrides?: CallOverrides
    ): Promise<[CirclePoolManager.TopPoolInfoStructOutput[]]>;

    getTotalNumberOfContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalNumberOfPools()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalNumberOfPools(uint8)"(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserContributedPoolInfo(
      userAddress: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CirclePoolManager.CumulativeLockInfoStructOutput[]]>;

    increaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeTopPools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPoolGenerated(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolForToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    privatePoolForToken(
      tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recordContribution(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPrivatePool(
      pool: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePoolForToken(
      token: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePrivatePoolForToken(
      tokenName: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTopPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalLiquidityRaisedInBnb(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueLockedInBnb(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAdminPoolFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPoolFactories(
    factories: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPoolFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTopPool(
    poolAddress: PromiseOrValue<string>,
    raisedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bnbLiquidity(
    _reciever: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseTotalValueLocked(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllContributedPools(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAllPools(overrides?: CallOverrides): Promise<string[]>;

  getContributedPoolAtIndex(
    user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCumulativePoolInfo(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CirclePoolManager.CumulativeLockInfoStructOutput[]>;

  "getPoolAt(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPoolAt(uint8,uint256)"(
    version: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolsOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTopPool(
    overrides?: CallOverrides
  ): Promise<CirclePoolManager.TopPoolInfoStructOutput[]>;

  getTotalNumberOfContributedPools(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalNumberOfPools(uint8)"(
    version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserContributedPoolInfo(
    userAddress: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CirclePoolManager.CumulativeLockInfoStructOutput[]>;

  increaseTotalValueLocked(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeTopPools(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPoolGenerated(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolForToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  privatePoolForToken(
    tokenName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  recordContribution(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPrivatePool(
    pool: PromiseOrValue<string>,
    tokenName: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePoolFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePoolForToken(
    token: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePrivatePoolForToken(
    tokenName: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTopPool(
    poolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalLiquidityRaisedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

  totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  totalValueLockedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

  transferAnyERC20Token(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdminPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolFactories(
      factories: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTopPool(
      poolAddress: PromiseOrValue<string>,
      raisedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAllPools(overrides?: CallOverrides): Promise<string[]>;

    getContributedPoolAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCumulativePoolInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CirclePoolManager.CumulativeLockInfoStructOutput[]>;

    "getPoolAt(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPoolAt(uint8,uint256)"(
      version: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTopPool(
      overrides?: CallOverrides
    ): Promise<CirclePoolManager.TopPoolInfoStructOutput[]>;

    getTotalNumberOfContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalNumberOfPools(uint8)"(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserContributedPoolInfo(
      userAddress: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CirclePoolManager.CumulativeLockInfoStructOutput[]>;

    increaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeTopPools(overrides?: CallOverrides): Promise<void>;

    isPoolGenerated(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolForToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    privatePoolForToken(
      tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    recordContribution(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPool(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPrivatePool(
      pool: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePoolForToken(
      token: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePrivatePoolForToken(
      tokenName: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTopPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalLiquidityRaisedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContributionUpdated(uint256)"(
      totalParticipations?: null
    ): ContributionUpdatedEventFilter;
    ContributionUpdated(
      totalParticipations?: null
    ): ContributionUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolForTokenRemoved(address,address)"(
      token?: PromiseOrValue<string> | null,
      pool?: null
    ): PoolForTokenRemovedEventFilter;
    PoolForTokenRemoved(
      token?: PromiseOrValue<string> | null,
      pool?: null
    ): PoolForTokenRemovedEventFilter;

    "PrivatePoolForTokenRemoved(string,address)"(
      tokenName?: PromiseOrValue<string> | null,
      pool?: null
    ): PrivatePoolForTokenRemovedEventFilter;
    PrivatePoolForTokenRemoved(
      tokenName?: PromiseOrValue<string> | null,
      pool?: null
    ): PrivatePoolForTokenRemovedEventFilter;

    "TvlChanged(uint256,uint256)"(
      totalLocked?: null,
      totalRaised?: null
    ): TvlChangedEventFilter;
    TvlChanged(totalLocked?: null, totalRaised?: null): TvlChangedEventFilter;

    "sender(address)"(sender?: null): senderEventFilter;
    sender(sender?: null): senderEventFilter;
  };

  estimateGas: {
    addAdminPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPoolFactories(
      factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTopPool(
      poolAddress: PromiseOrValue<string>,
      raisedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getContributedPoolAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativePoolInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolAt(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolAt(uint8,uint256)"(
      version: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopPool(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalNumberOfContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalNumberOfPools(uint8)"(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserContributedPoolInfo(
      userAddress: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeTopPools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPoolGenerated(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolForToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privatePoolForToken(
      tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordContribution(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPool(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPrivatePool(
      pool: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePoolForToken(
      token: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePrivatePoolForToken(
      tokenName: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTopPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalLiquidityRaisedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedInBnb(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdminPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPoolFactories(
      factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTopPool(
      poolAddress: PromiseOrValue<string>,
      raisedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bnbLiquidity(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributedPoolAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativePoolInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolAt(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolAt(uint8,uint256)"(
      version: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalNumberOfContributedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalNumberOfPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalNumberOfPools(uint8)"(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserContributedPoolInfo(
      userAddress: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseTotalValueLocked(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeTopPools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPoolGenerated(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolForToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privatePoolForToken(
      tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordContribution(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPrivatePool(
      pool: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePoolFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePoolForToken(
      token: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePrivatePoolForToken(
      tokenName: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTopPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalLiquidityRaisedInBnb(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalParticipants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValueLockedInBnb(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
