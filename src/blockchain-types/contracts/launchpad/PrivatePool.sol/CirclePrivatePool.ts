/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibTier {
  export type TierStruct = { endTime: PromiseOrValue<BigNumberish> };

  export type TierStructOutput = [BigNumber] & { endTime: BigNumber };
}

export declare namespace LibPresale {
  export type PrivateSaleStruct = {
    governance: PromiseOrValue<string>;
    tokenName: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    minContribution: PromiseOrValue<BigNumberish>;
    maxContribution: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    feeIndex: PromiseOrValue<BigNumberish>;
    poolDetails: PromiseOrValue<string>;
    tgeBps: PromiseOrValue<BigNumberish>;
    cycle: PromiseOrValue<BigNumberish>;
    cycleBps: PromiseOrValue<BigNumberish>;
    useWhitelist: PromiseOrValue<boolean>;
    publicStartTime: PromiseOrValue<BigNumberish>;
    tier1: LibTier.TierStruct;
    tier2: LibTier.TierStruct;
  };

  export type PrivateSaleStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    LibTier.TierStructOutput,
    LibTier.TierStructOutput
  ] & {
    governance: string;
    tokenName: string;
    paymentToken: string;
    minContribution: BigNumber;
    maxContribution: BigNumber;
    softCap: BigNumber;
    hardCap: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    feeIndex: BigNumber;
    poolDetails: string;
    tgeBps: BigNumber;
    cycle: BigNumber;
    cycleBps: BigNumber;
    useWhitelist: boolean;
    publicStartTime: BigNumber;
    tier1: LibTier.TierStructOutput;
    tier2: LibTier.TierStructOutput;
  };
}

export interface CirclePrivatePoolInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addWhitelistedUsers(address[],uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "changeTierDates(uint256,uint256)": FunctionFragment;
    "changeWhitelist(bool)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimedOf(address)": FunctionFragment;
    "contribute(uint256)": FunctionFragment;
    "contributionOf(address)": FunctionFragment;
    "convert(uint256)": FunctionFragment;
    "cycle()": FunctionFragment;
    "cycleBps()": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "emergencyWithdrawToken(address,address,uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "factory()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getContributionAmount(address)": FunctionFragment;
    "getNumberOfWhitelistedUsers()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getTier(uint256)": FunctionFragment;
    "getUpdatedState()": FunctionFragment;
    "getWhitelistedUsers(uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "initialize((address,string,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256,uint256,uint256,bool,uint256,(uint256),(uint256)),uint256[2],address[3],uint8)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "maxContribution()": FunctionFragment;
    "minContribution()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "poolDetails()": FunctionFragment;
    "poolState()": FunctionFragment;
    "poolType()": FunctionFragment;
    "publicStartTime()": FunctionFragment;
    "purchasedOf(address)": FunctionFragment;
    "rate()": FunctionFragment;
    "refundType()": FunctionFragment;
    "refundedOf(address)": FunctionFragment;
    "remainingContribution()": FunctionFragment;
    "removeWhitelistedUsers(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "softCap()": FunctionFragment;
    "startPublicSaleNow()": FunctionFragment;
    "startTier2SaleNow()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tgeBps()": FunctionFragment;
    "tgeDate()": FunctionFragment;
    "tier1()": FunctionFragment;
    "tier2()": FunctionFragment;
    "tokenName()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "totalRefunded()": FunctionFragment;
    "totalVolumePurchased()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePoolDetails(string)": FunctionFragment;
    "useWhitelisting()": FunctionFragment;
    "userAvalibleClaim(address)": FunctionFragment;
    "whitelistTier(address)": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
    "withdrawLeftovers()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "addWhitelistedUsers"
      | "cancel"
      | "changeTierDates"
      | "changeWhitelist"
      | "claim"
      | "claimedOf"
      | "contribute"
      | "contributionOf"
      | "convert"
      | "cycle"
      | "cycleBps"
      | "emergencyWithdraw"
      | "emergencyWithdrawToken"
      | "endTime"
      | "factory"
      | "finalize"
      | "getContributionAmount"
      | "getNumberOfWhitelistedUsers"
      | "getPoolInfo"
      | "getTier"
      | "getUpdatedState"
      | "getWhitelistedUsers"
      | "governance"
      | "hardCap"
      | "initialize"
      | "isWhitelisted"
      | "maxContribution"
      | "minContribution"
      | "owner"
      | "paymentToken"
      | "poolDetails"
      | "poolState"
      | "poolType"
      | "publicStartTime"
      | "purchasedOf"
      | "rate"
      | "refundType"
      | "refundedOf"
      | "remainingContribution"
      | "removeWhitelistedUsers"
      | "renounceOwnership"
      | "setGovernance"
      | "softCap"
      | "startPublicSaleNow"
      | "startTier2SaleNow"
      | "startTime"
      | "tgeBps"
      | "tgeDate"
      | "tier1"
      | "tier2"
      | "tokenName"
      | "totalClaimed"
      | "totalRaised"
      | "totalRefunded"
      | "totalVolumePurchased"
      | "transferOwnership"
      | "updatePoolDetails"
      | "useWhitelisting"
      | "userAvalibleClaim"
      | "whitelistTier"
      | "withdrawContribution"
      | "withdrawLeftovers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedUsers",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeTierDates",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWhitelist",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cycle", values?: undefined): string;
  encodeFunctionData(functionFragment: "cycleBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContributionAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfWhitelistedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUsers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      LibPresale.PrivateSaleStruct,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedUsers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPublicSaleNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTier2SaleNow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgeBps", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgeDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "tier1", values?: undefined): string;
  encodeFunctionData(functionFragment: "tier2", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumePurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "useWhitelisting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAvalibleClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftovers",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTierDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycleBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSaleNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTier2SaleNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgeBps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgeDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tier1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tier2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumePurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAvalibleClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftovers",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(address,uint256)": EventFragment;
    "Claimed(address,uint256,uint256,address)": EventFragment;
    "Contributed(address,uint256,address,uint256)": EventFragment;
    "ContributionWithdrawn(address,uint256,address)": EventFragment;
    "EmergencyWithdrawn(address,address,uint256,address)": EventFragment;
    "Finalized(address,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolPublicStartAtChanged(uint256,uint256)": EventFragment;
    "PoolTier2Started(uint256)": EventFragment;
    "PoolTierChanged(uint256,uint256,uint256)": EventFragment;
    "PoolUpdated(address,address,string)": EventFragment;
    "UsersDelisted(address,address,address[],uint256)": EventFragment;
    "UsersWhitelisted(address,address,address[],uint256,uint256)": EventFragment;
    "WhitelistChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolPublicStartAtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTier2Started"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTierChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsersDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsersWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistChanged"): EventFragment;
}

export interface CancelledEventObject {
  pool_address: string;
  timestamp: BigNumber;
}
export type CancelledEvent = TypedEvent<
  [string, BigNumber],
  CancelledEventObject
>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClaimedEventObject {
  pool_address: string;
  total_claimed: BigNumber;
  pending_claim: BigNumber;
  user_address: string;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface ContributedEventObject {
  pool_address: string;
  value: BigNumber;
  user: string;
  totalRaised: BigNumber;
}
export type ContributedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ContributedEventObject
>;

export type ContributedEventFilter = TypedEventFilter<ContributedEvent>;

export interface ContributionWithdrawnEventObject {
  pool_address: string;
  amount: BigNumber;
  user: string;
}
export type ContributionWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  ContributionWithdrawnEventObject
>;

export type ContributionWithdrawnEventFilter =
  TypedEventFilter<ContributionWithdrawnEvent>;

export interface EmergencyWithdrawnEventObject {
  pool_address: string;
  user: string;
  amount: BigNumber;
  pair: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface FinalizedEventObject {
  pool_address: string;
  user: string;
  bnb_fee: BigNumber;
  total_raised: BigNumber;
  actual_raised: BigNumber;
}
export type FinalizedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  FinalizedEventObject
>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolPublicStartAtChangedEventObject {
  timestamp: BigNumber;
  start_at: BigNumber;
}
export type PoolPublicStartAtChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolPublicStartAtChangedEventObject
>;

export type PoolPublicStartAtChangedEventFilter =
  TypedEventFilter<PoolPublicStartAtChangedEvent>;

export interface PoolTier2StartedEventObject {
  timestamp: BigNumber;
}
export type PoolTier2StartedEvent = TypedEvent<
  [BigNumber],
  PoolTier2StartedEventObject
>;

export type PoolTier2StartedEventFilter =
  TypedEventFilter<PoolTier2StartedEvent>;

export interface PoolTierChangedEventObject {
  timestamp: BigNumber;
  end_at: BigNumber;
  tier: BigNumber;
}
export type PoolTierChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PoolTierChangedEventObject
>;

export type PoolTierChangedEventFilter = TypedEventFilter<PoolTierChangedEvent>;

export interface PoolUpdatedEventObject {
  pool_address: string;
  user: string;
  details: string;
}
export type PoolUpdatedEvent = TypedEvent<
  [string, string, string],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface UsersDelistedEventObject {
  pool_address: string;
  user: string;
  removed_users: string[];
  total_users: BigNumber;
}
export type UsersDelistedEvent = TypedEvent<
  [string, string, string[], BigNumber],
  UsersDelistedEventObject
>;

export type UsersDelistedEventFilter = TypedEventFilter<UsersDelistedEvent>;

export interface UsersWhitelistedEventObject {
  pool_address: string;
  user: string;
  added_users: string[];
  total_users: BigNumber;
  tier: BigNumber;
}
export type UsersWhitelistedEvent = TypedEvent<
  [string, string, string[], BigNumber, BigNumber],
  UsersWhitelistedEventObject
>;

export type UsersWhitelistedEventFilter =
  TypedEventFilter<UsersWhitelistedEvent>;

export interface WhitelistChangedEventObject {
  _whitelist: boolean;
}
export type WhitelistChangedEvent = TypedEvent<
  [boolean],
  WhitelistChangedEventObject
>;

export type WhitelistChangedEventFilter =
  TypedEventFilter<WhitelistChangedEvent>;

export interface CirclePrivatePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CirclePrivatePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[number]>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTierDates(
      _tier: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[number[], BigNumber[], string, string]>;

    getTier(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibTier.TierStructOutput]>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, string]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      presale: LibPresale.PrivateSaleStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    poolDetails(overrides?: CallOverrides): Promise<[string]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    poolType(overrides?: CallOverrides): Promise<[number]>;

    publicStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundType(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remainingContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTier2SaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    tier1(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { endTime: BigNumber }>;

    tier2(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { endTime: BigNumber }>;

    tokenName(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefunded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<[boolean]>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistTier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<number>;

  addWhitelistedUsers(
    users: PromiseOrValue<string>[],
    tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTierDates(
    _tier: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeWhitelist(
    _whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contribute(
    _funds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributionOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    amountInWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycle(overrides?: CallOverrides): Promise<BigNumber>;

  cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawToken(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContributionAmount(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(
    overrides?: CallOverrides
  ): Promise<[number[], BigNumber[], string, string]>;

  getTier(
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibTier.TierStructOutput>;

  getUpdatedState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, string]>;

  getWhitelistedUsers(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    presale: LibPresale.PrivateSaleStruct,
    _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _linkAddress: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelisted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

  minContribution(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  poolDetails(overrides?: CallOverrides): Promise<string>;

  poolState(overrides?: CallOverrides): Promise<number>;

  poolType(overrides?: CallOverrides): Promise<number>;

  publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  purchasedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  refundType(overrides?: CallOverrides): Promise<BigNumber>;

  refundedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remainingContribution(overrides?: CallOverrides): Promise<BigNumber>;

  removeWhitelistedUsers(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    governance_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startPublicSaleNow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTier2SaleNow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

  tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

  tier1(overrides?: CallOverrides): Promise<BigNumber>;

  tier2(overrides?: CallOverrides): Promise<BigNumber>;

  tokenName(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolDetails(
    details_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

  userAvalibleClaim(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistTier(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawContribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftovers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<number>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    changeTierDates(
      _tier: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[number[], BigNumber[], string, string]>;

    getTier(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibTier.TierStructOutput>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, string]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      presale: LibPresale.PrivateSaleStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    poolDetails(overrides?: CallOverrides): Promise<string>;

    poolState(overrides?: CallOverrides): Promise<number>;

    poolType(overrides?: CallOverrides): Promise<number>;

    publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingContribution(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startPublicSaleNow(overrides?: CallOverrides): Promise<void>;

    startTier2SaleNow(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

    tier1(overrides?: CallOverrides): Promise<BigNumber>;

    tier2(overrides?: CallOverrides): Promise<BigNumber>;

    tokenName(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistTier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;

    withdrawLeftovers(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Cancelled(address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;
    Cancelled(
      pool_address?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CancelledEventFilter;

    "Claimed(address,uint256,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;
    Claimed(
      pool_address?: PromiseOrValue<string> | null,
      total_claimed?: null,
      pending_claim?: null,
      user_address?: null
    ): ClaimedEventFilter;

    "Contributed(address,uint256,address,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;
    Contributed(
      pool_address?: PromiseOrValue<string> | null,
      value?: null,
      user?: null,
      totalRaised?: null
    ): ContributedEventFilter;

    "ContributionWithdrawn(address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;
    ContributionWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;

    "EmergencyWithdrawn(address,address,uint256,address)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      amount?: null,
      pair?: null
    ): EmergencyWithdrawnEventFilter;

    "Finalized(address,address,uint256,uint256,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      bnb_fee?: null,
      total_raised?: null,
      actual_raised?: null
    ): FinalizedEventFilter;
    Finalized(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      bnb_fee?: null,
      total_raised?: null,
      actual_raised?: null
    ): FinalizedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolPublicStartAtChanged(uint256,uint256)"(
      timestamp?: null,
      start_at?: null
    ): PoolPublicStartAtChangedEventFilter;
    PoolPublicStartAtChanged(
      timestamp?: null,
      start_at?: null
    ): PoolPublicStartAtChangedEventFilter;

    "PoolTier2Started(uint256)"(timestamp?: null): PoolTier2StartedEventFilter;
    PoolTier2Started(timestamp?: null): PoolTier2StartedEventFilter;

    "PoolTierChanged(uint256,uint256,uint256)"(
      timestamp?: null,
      end_at?: null,
      tier?: null
    ): PoolTierChangedEventFilter;
    PoolTierChanged(
      timestamp?: null,
      end_at?: null,
      tier?: null
    ): PoolTierChangedEventFilter;

    "PoolUpdated(address,address,string)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      details?: null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      details?: null
    ): PoolUpdatedEventFilter;

    "UsersDelisted(address,address,address[],uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      removed_users?: null,
      total_users?: null
    ): UsersDelistedEventFilter;
    UsersDelisted(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      removed_users?: null,
      total_users?: null
    ): UsersDelistedEventFilter;

    "UsersWhitelisted(address,address,address[],uint256,uint256)"(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      added_users?: null,
      total_users?: null,
      tier?: null
    ): UsersWhitelistedEventFilter;
    UsersWhitelisted(
      pool_address?: PromiseOrValue<string> | null,
      user?: null,
      added_users?: null,
      total_users?: null,
      tier?: null
    ): UsersWhitelistedEventFilter;

    "WhitelistChanged(bool)"(_whitelist?: null): WhitelistChangedEventFilter;
    WhitelistChanged(_whitelist?: null): WhitelistChangedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTierDates(
      _tier: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTier(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdatedState(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      presale: LibPresale.PrivateSaleStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    poolDetails(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    publicStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingContribution(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTier2SaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    tgeDate(overrides?: CallOverrides): Promise<BigNumber>;

    tier1(overrides?: CallOverrides): Promise<BigNumber>;

    tier2(overrides?: CallOverrides): Promise<BigNumber>;

    tokenName(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useWhitelisting(overrides?: CallOverrides): Promise<BigNumber>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistTier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTierDates(
      _tier: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeWhitelist(
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      _funds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTier(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdatedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      presale: LibPresale.PrivateSaleStruct,
      _fees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startPublicSaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTier2SaleNow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tier1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tier2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefunded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolumePurchased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistTier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftovers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
