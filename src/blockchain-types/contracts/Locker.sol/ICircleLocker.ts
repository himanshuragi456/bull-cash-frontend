/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICircleLockerInterface extends utils.Interface {
  functions: {
    "editLock(uint256,uint256,uint256)": FunctionFragment;
    "lock(address,address,bool,uint256,uint256,string)": FunctionFragment;
    "multipleVestingLock(address[],uint256[],address,bool,uint256,uint256,uint256,uint256,string)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "vestingLock(address,address,bool,uint256,uint256,uint256,uint256,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "editLock"
      | "lock"
      | "multipleVestingLock"
      | "unlock"
      | "vestingLock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "editLock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multipleVestingLock",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingLock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "editLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multipleVestingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingLock",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICircleLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICircleLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  editLock(
    lockId: PromiseOrValue<BigNumberish>,
    newAmount: PromiseOrValue<BigNumberish>,
    newUnlockDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    unlockDate: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multipleVestingLock(
    owners: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    tgeDate: PromiseOrValue<BigNumberish>,
    tgeBps: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    cycleBps: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlock(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingLock(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    tgeDate: PromiseOrValue<BigNumberish>,
    tgeBps: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    cycleBps: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
