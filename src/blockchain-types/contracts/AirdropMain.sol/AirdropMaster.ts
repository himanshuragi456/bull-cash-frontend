/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AirdropMasterInterface extends utils.Interface {
  functions: {
    "MAX_ALLOCATIONS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addWhitelistedUser(address,uint256)": FunctionFragment;
    "addWhitelistedUsers(address[],uint256[])": FunctionFragment;
    "cancel()": FunctionFragment;
    "changeStartAt(uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimedOf(address)": FunctionFragment;
    "cycle()": FunctionFragment;
    "cycleBps()": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "emergencyWithdrawToken(address,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getNumberOfWhitelistedUsers()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getUpdatedState()": FunctionFragment;
    "getWhitelistedUsers(uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address[3],uint256[1],string,address[3],uint8)": FunctionFragment;
    "initializeVesting(uint256[3])": FunctionFragment;
    "isUserWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolDetails()": FunctionFragment;
    "poolState()": FunctionFragment;
    "removeWhitelistedUser(address)": FunctionFragment;
    "removeWhitelistedUsers(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "tgeBps()": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalCost()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePoolDetails(string)": FunctionFragment;
    "useWhitelisting()": FunctionFragment;
    "userAvalibleClaim(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_ALLOCATIONS"
      | "VERSION"
      | "addWhitelistedUser"
      | "addWhitelistedUsers"
      | "cancel"
      | "changeStartAt"
      | "claim"
      | "claimedOf"
      | "cycle"
      | "cycleBps"
      | "emergencyWithdraw"
      | "emergencyWithdrawToken"
      | "factory"
      | "getNumberOfWhitelistedUsers"
      | "getPoolInfo"
      | "getUpdatedState"
      | "getWhitelistedUsers"
      | "governance"
      | "initialize"
      | "initializeVesting"
      | "isUserWhitelisted"
      | "owner"
      | "poolDetails"
      | "poolState"
      | "removeWhitelistedUser"
      | "removeWhitelistedUsers"
      | "renounceOwnership"
      | "setGovernance"
      | "startTime"
      | "tgeBps"
      | "token"
      | "totalClaimed"
      | "totalCost"
      | "transferOwnership"
      | "updatePoolDetails"
      | "useWhitelisting"
      | "userAvalibleClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ALLOCATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedUsers",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeStartAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "cycle", values?: undefined): string;
  encodeFunctionData(functionFragment: "cycleBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumberOfWhitelistedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUsers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      [PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVesting",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedUsers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "tgeBps", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalCost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "useWhitelisting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAvalibleClaim",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ALLOCATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeStartAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycleBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgeBps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAvalibleClaim",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
}

export interface CancelledEventObject {
  timestamp: BigNumber;
}
export type CancelledEvent = TypedEvent<[BigNumber], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClaimedEventObject {
  user: string;
  total: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolUpdatedEventObject {
  timestamp: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<[BigNumber], PoolUpdatedEventObject>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface AirdropMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    addWhitelistedUser(
      user: PromiseOrValue<string>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStartAt(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, string, number[], BigNumber[], string, string, string]>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, string]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeVesting(
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolDetails(overrides?: CallOverrides): Promise<[string]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    removeWhitelistedUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<[boolean]>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  addWhitelistedUser(
    user: PromiseOrValue<string>,
    _allocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWhitelistedUsers(
    users: PromiseOrValue<string>[],
    _allocations: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStartAt(
    _startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycle(overrides?: CallOverrides): Promise<BigNumber>;

  cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawToken(
    payaddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(
    overrides?: CallOverrides
  ): Promise<[string, string, number[], BigNumber[], string, string, string]>;

  getUpdatedState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number, string]>;

  getWhitelistedUsers(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    _addrs: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _saleInfo: [PromiseOrValue<BigNumberish>],
    _poolDetails: PromiseOrValue<string>,
    _linkAddress: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeVesting(
    _vestingInit: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUserWhitelisted(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolDetails(overrides?: CallOverrides): Promise<string>;

  poolState(overrides?: CallOverrides): Promise<number>;

  removeWhitelistedUser(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhitelistedUsers(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    governance_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalCost(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolDetails(
    details_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

  userAvalibleClaim(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    addWhitelistedUser(
      user: PromiseOrValue<string>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    changeStartAt(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[string, string, number[], BigNumber[], string, string, string]>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, string]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeVesting(
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolDetails(overrides?: CallOverrides): Promise<string>;

    poolState(overrides?: CallOverrides): Promise<number>;

    removeWhitelistedUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalCost(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Cancelled(uint256)"(timestamp?: null): CancelledEventFilter;
    Cancelled(timestamp?: null): CancelledEventFilter;

    "Claimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      total?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: PromiseOrValue<string> | null,
      total?: null
    ): ClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolUpdated(uint256)"(timestamp?: null): PoolUpdatedEventFilter;
    PoolUpdated(timestamp?: null): PoolUpdatedEventFilter;
  };

  estimateGas: {
    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelistedUser(
      user: PromiseOrValue<string>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStartAt(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleBps(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUpdatedState(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeVesting(
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolDetails(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeBps(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalCost(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useWhitelisting(overrides?: CallOverrides): Promise<BigNumber>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ALLOCATIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelistedUser(
      user: PromiseOrValue<string>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStartAt(
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawToken(
      payaddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpdatedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _saleInfo: [PromiseOrValue<BigNumberish>],
      _poolDetails: PromiseOrValue<string>,
      _linkAddress: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeVesting(
      _vestingInit: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelistedUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userAvalibleClaim(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
